```
(gdb) backtrace
#0  0x080a80b5 in next_code (self=self@entry=0x83193c0) at libarchive/archive_read_support_filter_compress.c:386
#1  0x080a85d1 in compress_filter_read (self=0x83193c0, pblock=0x8319408) at libarchive/archive_read_support_filter_compress.c:287
#2  0x0808d7eb in __archive_read_filter_ahead (filter=0x83193c0, min=14, avail=0xbffff158) at libarchive/archive_read.c:1275
#3  0x080a6871 in bzip2_reader_bid (self=0x82fdd48, filter=0x83193c0) at libarchive/archive_read_support_filter_bzip2.c:134
#4  0x08087670 in choose_filters (a=0x82fdca0) at libarchive/archive_read.c:562
#5  archive_read_open1 (_a=0x82fdca0) at libarchive/archive_read.c:506
#6  0x080a47df in archive_read_open_filenames (a=0x82fdca0, filenames=<optimized out>, block_size=10240) at libarchive/archive_read_open_filename.c:150
#7  0x080a48b1 in archive_read_open_filename (a=0x82fdca0, filename=0xbffff6eb "results/crashes/id:000000,sig:11,src:000065,op:havoc,rep:32", block_size=10240)
    at libarchive/archive_read_open_filename.c:107
#8  0x08052a7d in read_archive (bsdtar=bsdtar@entry=0xbffff344, mode=mode@entry=120 'x', writer=writer@entry=0x82fc1d0) at tar/read.c:204
#9  0x08054a1a in tar_mode_x (bsdtar=0xbffff344) at tar/read.c:104
#10 0x0804d6a5 in main (argc=4, argv=0xbffff554) at tar/bsdtar.c:804
```
afl-fuzz. Briefly describe what the vulnerability is in the libarchive source
code (2-3 sentences).
The following code has a vulnerablity issue
```
	while (code >= 256) {
		*state->stackp++ = state->suffix[code];
		code = state->prefix[code];
	}
```
state is a instance of following struct
```
struct private_data {
	...(removed)
	/*
	 * Scratch area for expanding dictionary entries.  Note:
	 * "worst" case here comes from compressing /dev/zero: the
	 * last code in the dictionary will code a sequence of
	 * 65536-256 zero bytes.  Thus, we need stack space to expand
	 * a 65280-byte dictionary entry.  (Of course, 32640:1
	 * compression could also be considered the "best" case. ;-)
	 */
	unsigned char		*stackp;
	unsigned char		 stack[65300];
};
```
The code is trying to copy something to a buffer, and there is `code` variable to control the flow of program.
I think normally there should be a path for program to get out of while, but in our case `code` is always 256 beacuase
`state->prefix[256]` when is 256 so actually we have a infinite while and beside of buffer size we have overflow here.
To fix this issue i think we should make sure value of `code` is awlays decreasing and it could stop the while.
We can proof our theory with these lines and run them in gdb:
Proof of buffer overflow(this value should be less than buffer size that is 65300):
```
print ((struct private_data *)self->data)->stackp - &((struct private_data *)self->data)->stack[0]
```
and
```
info locals
```
Show us that code is equal to 256 and bellow line shows us we have infinite loop.
```
print ((struct private_data *)self->data)->prefix[256]
```
